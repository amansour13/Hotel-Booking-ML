# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZQ7r9scE4aooPFH4yGV5QPkF89bpKZny
"""

# from google.colab import files
import pandas as pd

# uploaded = files.upload()
df = pd.read_csv("hotel.csv")
df.columns = df.columns.str.strip()
for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].str.strip()

df["date of reservation"] = pd.to_datetime(df["date of reservation"], errors='coerce')
df["reservation_day"] = df["date of reservation"].dt.day
df["reservation_month"] = df["date of reservation"].dt.month
df["reservation_year"] = df["date of reservation"].dt.year
df["reservation_weekday"] = df["date of reservation"].dt.weekday

df["reservation_week"] = df["date of reservation"].dt.isocalendar().week

df["reservation_is_weekend"] = df["reservation_weekday"].apply(lambda x: 1 if x >= 5 else 0)
df["reservation_season"] = df["reservation_month"].apply(
    lambda x: 'Winter' if x in [12,1,2] else 'Spring' if x in [3,4,5] else 'Summer' if x in [6,7,8] else 'Fall'
)
df = df.dropna(subset=["reservation_day", "reservation_month", "reservation_year"])

if 'Booking_ID' in df.columns:
    df = df.drop('Booking_ID', axis=1)
df = df.drop(columns=["date of reservation"])

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['booking status'] = le.fit_transform(df['booking status'])

important_cols = ['number of adults', 'number of children', 'car parking space',
                  'repeated', 'P-C', 'P-not-C', 'reservation_year']

df.drop(important_cols, axis=1, inplace=True)

categorical_cols = df.select_dtypes(include='object').columns.tolist()
categorical_cols = [col for col in categorical_cols if col != 'booking status']
df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant
import numpy as np


X_vif = df.drop('booking status', axis=1)
X_vif = X_vif.select_dtypes(include=['int64', 'float64'])
X_vif = X_vif.replace([np.inf, -np.inf], np.nan).dropna()

X_vif_const = add_constant(X_vif)
vif_data = pd.DataFrame()
vif_data["Feature"] = X_vif_const.columns
vif_data["VIF"] = [variance_inflation_factor(X_vif_const.values, i) for i in range(X_vif_const.shape[1])]
print(vif_data.sort_values(by="VIF", ascending=False))

from sklearn.model_selection import train_test_split
X = df.drop("booking status", axis=1)
y = df["booking status"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train_scaled, y_train)
y_pred_rf = rf_model.predict(X_test_scaled)

import pickle

pickle.dump(rf_model, open("model.pkl", "wb"))

# from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# print("\nRandom Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
# print("\nClassification Report (Random Forest):\n", classification_report(y_test, y_pred_rf))



# from sklearn.metrics import roc_curve, auc, precision_recall_curve, average_precision_score
# import matplotlib.pyplot as plt

# y_scores = rf_model.predict_proba(X_test_scaled)[:, 1]

# # ===== 1. ROC Curve =====
# fpr, tpr, thresholds = roc_curve(y_test, y_scores)
# roc_auc = auc(fpr, tpr)

# plt.figure(figsize=(6, 5))
# plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc:.2f})', color='blue')
# plt.plot([0, 1], [0, 1], 'k--', label='Random Classifier')
# plt.xlabel('False Positive Rate')
# plt.ylabel('True Positive Rate')
# plt.title('Receiver Operating Characteristic (ROC)')
# plt.legend(loc='lower right')
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# # ===== 2. Precision-Recall Curve =====
# precision, recall, _ = precision_recall_curve(y_test, y_scores)
# avg_precision = average_precision_score(y_test, y_scores)

# plt.figure(figsize=(6, 5))
# plt.plot(recall, precision, label=f'PR Curve (AP = {avg_precision:.2f})', color='green')
# plt.xlabel('Recall')
# plt.ylabel('Precision')
# plt.title('Precision-Recall Curve')
# plt.legend(loc='lower left')
# plt.grid(True)
# plt.tight_layout()
# plt.show()